{"version":3,"file":"static/js/279.3920d8e8.chunk.js","mappings":"kKAEA,SAASA,EAASC,EAAWC,GAC3B,OAAGD,EAAUE,SAAWD,EAAUC,MAUpC,CAEA,IAAMC,GAAYC,EAAAA,EAAAA,OAAK,YAAiB,IAAdF,EAAM,EAANA,OAGxB,OAFAG,QAAQC,IAAI,iBAAkB,gBAG5B,iBAAKC,UAAU,QAAO,WAEpB,0FACA,4FAAkBL,OAGxB,GAAGH,GAEH,W,kFCeA,UArCgB,WACdM,QAAQC,IAAI,iBACZ,OAA4BE,EAAAA,EAAAA,UAAS,GAAE,eAAhCC,EAAM,KAAEC,EAAS,KACxB,GAA4BF,EAAAA,EAAAA,UAAS,GAAE,eAAhCN,EAAM,KAAES,EAAS,KACxB,OACE,iBAAKJ,UAAU,SAAQ,WACrB,4BACE,0FACA,4BACE,mBACEK,QAAS,WACPF,GAAU,SAACG,GAAG,OAAKA,EAAM,CAAC,GAC5B,EAAE,kCAIJ,sEAEF,4BACE,mBACED,QAAS,WACPD,GAAU,SAACE,GAAG,OAAKA,EAAM,CAAC,GAC5B,EAAE,kCAIJ,gGAGJ,0BACE,yFAAeJ,QAEjB,SAAC,UAAK,CAACP,OAAQA,MAGrB,C,8BCvCA,WAAiB,C","sources":["020_memo/end/Child.js","020_memo/end/Example.js","webpack://react-app-template/./src/020_memo/end/Example.css?2d7c"],"sourcesContent":["import { memo } from \"react\";\n\nfunction areEqual(prevProps, nextProps) {\n  if(prevProps.countB !== nextProps.countB) {\n    return false; // 再レンダリング\n  } else {\n    return true; // 再レンダリング発生なし\n  }\n  /*\n  nextProps を render に渡した結果が\n  prevProps を render に渡した結果となるときに true を返し\n  それ以外のときに false を返す\n  */\n}\n\nconst ChildMemo = memo(({ countB }) => {\n  console.log(\"%cChild render\", \"color: red;\");\n\n  return (\n    <div className=\"child\"\n    >\n      <h2>子コンポーネント領域</h2>\n      <span>ボタンBクリック回数：{countB}</span>\n    </div>\n  );\n}, areEqual);\n\nexport default ChildMemo;\n","// POINT　memo関数で再レンダリングの抑止\nimport React, { useState } from \"react\";\nimport Child from \"./Child\";\nimport \"./Example.css\";\n\nconst Example = () => {\n  console.log(\"Parent render\");\n  const [countA, setCountA] = useState(0);\n  const [countB, setCountB] = useState(0);\n  return (\n    <div className=\"parent\">\n      <div>\n        <h3>親コンポーネント領域</h3>\n        <div>\n          <button\n            onClick={() => {\n              setCountA((pre) => pre + 1);\n            }}\n          >\n            ボタンA\n          </button>\n          <span>親のstateを更新</span>\n        </div>\n        <div>\n          <button\n            onClick={() => {\n              setCountB((pre) => pre + 1);\n            }}\n          >\n            ボタンB\n          </button>\n          <span>子のpropsに渡すstateを更新</span>\n        </div>\n      </div>\n      <div>\n        <p>ボタンAクリック回数：{countA}</p>\n      </div>\n      <Child countB={countB} />\n    </div>\n  );\n};\n\nexport default Example;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["areEqual","prevProps","nextProps","countB","ChildMemo","memo","console","log","className","useState","countA","setCountA","setCountB","onClick","pre"],"sourceRoot":""}